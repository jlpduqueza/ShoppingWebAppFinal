package com.tommystore.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.tommystore.bean.ProductBean;
import com.tommystore.bean.RoleFilterBean;
import com.tommystore.bean.SignUpBean;
import com.tommystore.constant.Role;
import com.tommystore.domain.Category;
import com.tommystore.domain.InventoryItem;
import com.tommystore.domain.Product;
import com.tommystore.domain.User;
import com.tommystore.service.CategoryService;
import com.tommystore.service.InventoryItemService;
import com.tommystore.service.ProductService;
import com.tommystore.service.UserService;

@Controller
@RequestMapping(value = "/admin")
@PropertySource("/WEB-INF/properties")
public class AdminController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private CategoryService categoryService;
	
	@Autowired
	private InventoryItemService inventoryItemService;
	
	@Value("${inventory.nstock}")
	private int nStock;

    @RequestMapping(value = "/user-list-view", method = RequestMethod.GET)
    public String login(Model model) {
    	List<Role> roleList = new ArrayList<>();
    	
    	for (Role role : Role.values()) {
    		roleList.add(role);
    	}
    	
    	model.addAttribute("userList", userService.getUserList());
    	model.addAttribute("roleBean", new RoleFilterBean());
    	model.addAttribute("roleList", roleList);
    	
		return "admin-dashboard-userlist";
    }
    
    @RequestMapping(value = "/filter-user", method = RequestMethod.POST)
    public String filterUser(@Valid RoleFilterBean roleBean, Model model) {
    	List<Role> roleList = new ArrayList<>();
    	
    	for (Role role : Role.values()) {
    		roleList.add(role);
    	}
    	
    	model.addAttribute("userList", userService.findUserByRole(roleBean.getRole()));
    	model.addAttribute("roleBean", new RoleFilterBean());
    	model.addAttribute("roleList", roleList);
    	model.addAttribute("role", roleBean.getRole());
    	return "admin-dashboard-userlist";
    }
    
    @RequestMapping(value = "/category-list-view", method = RequestMethod.GET)
    public String categoryView(Model model) {
    	model.addAttribute("categoryList", categoryService.getCategoryList());
		return "admin-dashboard-categorylist";
    }
    
    @RequestMapping(value = "/product-list-view", method = RequestMethod.GET)
    public String productView(Model model) {
    	model.addAttribute("productList", productService.getProductList());
		return "admin-dashboard-productlist";
    }
    
    @RequestMapping(value = "/inventoryitem-list-view", method = RequestMethod.GET)
    public String inventoryItem(Model model) {
    	model.addAttribute("inventoryItemList", inventoryItemService.getInventoryItemList());
		return "admin-dashboard-inventoryitemlist";
    }
    
    @RequestMapping(value = "/dashboard", method = RequestMethod.GET)
    public String dashboard(Model model) {
    	model.addAttribute("userList", userService.viewNewUser());
    	model.addAttribute("inventoryItemList", inventoryItemService.findInventoryItemListByStock(nStock));
		return "admin-dashboard";
    }
    
    @RequestMapping(value = "/add-admin-view", method = RequestMethod.GET)
    public String addAdministratorView(Model model) {
    	model.addAttribute("signUpBean", new SignUpBean());
		return "admin-dashboard-add-administrator";
    }
    
    @RequestMapping(value = "/add-category-view", method = RequestMethod.GET)
    public String addCategoryView(Model model) {
    	model.addAttribute("category", new Category());
		return "admin-dashboard-add-category";
    }
    
    @RequestMapping(value = "/add-product-view", method = RequestMethod.GET)
    public String addProductView(Model model) {
    	model.addAttribute("productBean", new ProductBean());
    	model.addAttribute("categoryMap",categoryService.getCategoryMap());
		return "admin-dashboard-add-product";
    }
    
    @RequestMapping(value = "/add-admin", method = RequestMethod.POST)
    public String addAdministrator(@Valid SignUpBean signUpBean, BindingResult result, Model model, HttpSession session) {
    	
        if(!signUpBean.getConfirmPassword().equals(signUpBean.getPassword())) {
        	result.rejectValue("confirmPassword", "error.signUpBean", "Those password didn't match.");
        }
    	
        if (result.hasErrors()) {
            return "sign-up";
        }	
        
        userService.saveAdminBySignUp(signUpBean);
		return "redirect:dashboard";
    }
    
    @RequestMapping(value = "/add-category", method = RequestMethod.POST)
    public String addCategory(@Valid Category category, BindingResult result, Model model, HttpSession session) {

        if (result.hasErrors()) {
            return "admin-dashboard-add-category";
        }	
        
        categoryService.saveCategory(category);
		return "redirect:dashboard";
    }
    
    @RequestMapping(value = "/add-product", method = RequestMethod.POST)
    public String addProduct(@Valid ProductBean productBean, BindingResult result, Model model, HttpSession session) {

        if (result.hasErrors()) {
        	model.addAttribute("categoryMap",categoryService.getCategoryMap());
            return "admin-dashboard-add-product";
        }	
        
        Product product = new Product();
        Category category = categoryService.findCategoryById(productBean.getCategory().getId());
        product.setCategory(category);
        product.setName(productBean.getName());
        product.setPrice(productBean.getPrice());
        productService.saveProduct(product);
    	System.out.println("ctrl2");
		return "redirect:dashboard";
    }
    
    @RequestMapping(value = "/edit-user-view", method = RequestMethod.GET)
    public String editUserView(Model model, @RequestParam("id") Integer userId) {
    	User user = userService.findUserById(userId);
    	model.addAttribute("userToEdit", user);
		return "admin-dashboard-edit-user";
    }
    
    @RequestMapping(value = "/edit-category-view", method = RequestMethod.GET)
    public String editCategoryView(Model model, @RequestParam("id") Integer id) {
    	Category category = categoryService.findCategoryById(id);
    	model.addAttribute("categoryToEdit", category);
		return "admin-dashboard-edit-category";
    }
    
    @RequestMapping(value = "/edit-product-view", method = RequestMethod.GET)
    public String editProductView(Model model, @RequestParam("id") Integer id) {
    	Product product = productService.findProductById(id);
    	model.addAttribute("product", product);
    	model.addAttribute("categoryMap",categoryService.getCategoryMap());
		return "admin-dashboard-edit-product";
    }
    
    @RequestMapping(value = "/add-stock-view", method = RequestMethod.GET)
    public String editInventoryItemView(Model model, @RequestParam("id") Integer id) {
    	InventoryItem inventoryItem = inventoryItemService.findInventoryItemById(id);
    	model.addAttribute("inventoryItem", inventoryItem);
		return "admin-dashboard-add-stock";
    }
    
    @RequestMapping(value = "/edit-user", method = RequestMethod.POST)
    public String editUser(@Valid User user, BindingResult result,Model model) {
    	
        if (result.hasErrors()) {
            return "sign-up";
        }	
        
        userService.saveUser(user);
		return "redirect:dashboard";
    }
    
    @RequestMapping(value = "/edit-category", method = RequestMethod.POST)
    public String editCategory(@Valid Category category, BindingResult result, Model model) {
    	
        if (result.hasErrors()) {
            return "admin-dashboard-edit-product";
        }	
        
        categoryService.saveCategory(category);
		return "redirect:category-list-view";
    }
    
    @RequestMapping(value = "/edit-product", method = RequestMethod.POST)
    public String editCategory(@Valid Product product, BindingResult result, Model model) {
    	
        if (result.hasErrors()) {
        	model.addAttribute("product", product);
        	model.addAttribute("categoryMap",categoryService.getCategoryMap());
    		return "admin-dashboard-edit-product";
        }	
        
        System.out.println(product.getId());
        
        productService.saveProduct(product);
		return "redirect:dashboard";
    }
    
    @RequestMapping(value = "/add-stock", method = RequestMethod.POST)
    public String inventoryItem(@Valid InventoryItem inventoryItem, BindingResult result, Model model) {
    	
        if (result.hasErrors()) {
            return "sign-up";
        }	
        InventoryItem inventoryItemToMerge = inventoryItemService.findInventoryItemById(inventoryItem.getId());
        inventoryItemToMerge.setQuantity(inventoryItem.getQuantity());
        inventoryItemService.saveInventoryItem(inventoryItemToMerge);
		return "redirect:dashboard";
    }
    
    @RequestMapping(value = "/delete-product", method = RequestMethod.GET)
    public String deleteProduct(Model model, @RequestParam("id") Integer id) {
    	productService.deleteProductById(id);
		return "redirect:product-list-view";
    }
    
    @RequestMapping(value = "/delete-category", method = RequestMethod.GET)
    public String deleteCategory(Model model, @RequestParam("id") Integer id) {
    	categoryService.deleteCategory(id);
		return "redirect:category-list-view";
    }


}
